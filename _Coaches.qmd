## COL: Coaches

### ROW: Intro {height="17%"}

::: {#div-intro-1 style="font-size: 0.9em;"}
This section looks on twelve coaches responsible for the biggest number of athletes. Team spots (such as baskteball or football) were intentionally left out. It turns out that big training groups are common especially in rowing.
:::

### ROW: Plot
```{r}
#| label: get-coaches-data

coaches <- athletes_dat |> 
  filter(events != "['Men']", events != "['Women']") |> # filters out teams
  group_by(coach) |> 
  summarise(n_athletes = length(unique(name))) |> 
  arrange(desc(n_athletes))

top_coaches <- coaches |> 
  filter(nchar(coach) > 1) |> 
  top_n(n_athletes, n = 10)
```

```{r}
#| label: get-coaches-athletes

top_coaches_athletes <- athletes_dat |> 
  filter(coach %in% top_coaches$coach) |> 
  select(name, coach, disciplines) |> 
  # order by number of athletes per coach
  group_by(coach) |> 
  mutate(n_athletes = n()) |> 
  arrange(desc(n_athletes)) |> 
  select(-n_athletes)

# polish disicpline spelling
top_coaches_athletes$disciplines <- str_sub(top_coaches_athletes$disciplines, 3, nchar(top_coaches_athletes$disciplines) - 2)
  
# polish coach's name before adding it
# (remove everything what is not a name including country codes, line breaks for two coaches)
top_coaches_athletes$coach <- gsub("National: ", "", top_coaches_athletes$coach)
top_coaches_athletes$coach <- gsub("Club: ", "", top_coaches_athletes$coach)
# country codes
top_coaches_athletes$coach <- gsub("\\s*\\([^)]*\\)", ",", top_coaches_athletes$coach)
top_coaches_athletes$coach <- gsub(",$", "", top_coaches_athletes$coach)
top_coaches_athletes$coach <- gsub("([^,]*,[^,]*),", "\\1\n", top_coaches_athletes$coach)
```


```{r}
#| label: figure-coaches-arc-plot

# credits: https://www.data-to-viz.com/graph/arc.html

coaches_graph <- graph_from_data_frame(top_coaches_athletes, directed = T)

### all details required for plotting must be stored as graph's attributes
# 2. disciplines for coaches
# a lookup table: each coach gets a discipline based on their first athlete
coach_disciplines <- top_coaches_athletes |> 
  group_by(coach) |> 
  summarize(discipline = first(disciplines))

# Ensure all unique nodes (both coaches and athletes) are present
nodes <- unique(c(top_coaches_athletes$coach, top_coaches_athletes$name))

# Create a named vector mapping each coach and athlete to their discipline
discipline_map <- setNames(top_coaches_athletes$disciplines, top_coaches_athletes$name)

# Add disciplines for coaches
discipline_map[coach_disciplines$coach] <- coach_disciplines$discipline

# Assign discipline to nodes in the graph
V(coaches_graph)$discipline <- discipline_map[V(coaches_graph)$name]

# 3. coach names
# unique coach-athlete names
coach_map <- setNames(top_coaches_athletes$coach, top_coaches_athletes$name)
# coach names to nodes in the graph (match by athlete's name)
V(coaches_graph)$coach <- coach_map[V(coaches_graph)$name]

### Node order
# aim: coach + all his/her athletes should come together
# unique coach names
coaches <- unique(top_coaches_athletes$coach)

# Create a custom node order: Coach followed by their athletes
ordered_nodes <- unlist(lapply(coaches, function(c) {
  c(c, top_coaches_athletes$name[top_coaches_athletes$coach == c])
}))

# Reorder nodes in the graph based on this order
V(coaches_graph)$order <- match(V(coaches_graph)$name, ordered_nodes)

### colour scale by discipline
col_disciplines <- col_paris[c(5, 2, 1, 3)]
names(col_disciplines) <- sort(unique(discipline_map))

ggraph(coaches_graph, layout = data.frame(x = V(coaches_graph)$order, y = 0)) +
  geom_edge_arc(edge_colour = col_paris[4], edge_alpha = 0.8, edge_width = 0.3, fold = T) +
  geom_node_point(aes(color = discipline, fill = discipline, size = name %in% top_coaches_athletes$coach), alpha = 0.75) +
  scale_colour_manual(values = col_disciplines, guide = "none") +
  scale_fill_manual(values = col_disciplines, guide = "none") +
  scale_size_manual(values = c(1.25, 3), guide = "none") +  # athletes = 1.25, coaches = 3; no legend for this
  geom_node_text(aes(label = ifelse(name %in% top_coaches_athletes$coach, name, NA)), 
                 size = 3, angle = 90, vjust = 0, hjust = 1, nudge_y = -1) +
  guides(colour = guide_legend(override.aes = list(size = 3), title = "Discipline")) +
  theme_void() +
  theme(
    legend.position = "top",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 12),
    plot.margin = unit(c(0,0,0.4,0), "null"),
    panel.spacing = unit(c(0,0,3.4,0), "null")
  ) +
  expand_limits(x = c(-1.2, 1.2), y = c(-5, 1.2))
```

## COL: Athlete transfers

### Intro {height="17%"}

::: {#div-intro style="font-size: 0.9em;"}
It is not rare for athletes not to represent the country they were born in. This figure looks at the most frequent transfers among participants of the PAris 2024 Olympics. Note that a contributor to change in nationality is also breakup of countries such as in case of Yugoslavia.
:::

### Plot

```{r}
#| label: data-birth-vs-nationality

athletes_nat <- athletes_dat |> 
  select(birth_country, nationality)

# only flows with more than a single observation will be coloured somehow
athlete_transfers <- athletes_nat |> 
  filter(nchar(birth_country) > 0, birth_country != nationality) |> 
  # Freq are counts for each known combination
  group_by(birth_country, nationality) |> 
  summarise(Freq = n()) |> 
  ungroup() |> 
  mutate(group = case_when(
    Freq <= 2 ~ "max. 2 athletes",
    Freq > 2 & Freq < 6 ~ "3 - 5 athletes",
    TRUE ~ paste(birth_country, nationality, sep = " \U2192 ")
  )) |> 
  mutate(group_label = case_when(
    grepl("\U2192", group) ~ group,
    TRUE ~ NA
  )) |> 
  # sorts the data by Freq
  arrange(desc(Freq)) |> 
  mutate(
    birth_country = factor(birth_country, levels = unique(birth_country)),
    nationality = factor(nationality, levels = unique(nationality))
  )

```

```{r}
#| label: figure-nationalities-sankey

# add more colors to this palette :
col_transfers <- c(colorRampPalette(col_paris[c(3, 1, 2)])(20), "grey30", "grey80")
names(col_transfers) <- unique(athlete_transfers$group)

### Plot
# major flows
p_transfers <- ggplot(athlete_transfers, aes(y = Freq, axis1 = birth_country, axis2 = nationality, fill = group)) +
  geom_alluvium(alpha = 0.8) +
  scale_fill_manual(values = col_transfers) +
  theme_void() +
  theme(margin(0, 0, 50, 0, unit = "pt"),
        aspect.ratio = 1,
        legend.position = "none")

# create only legend
dummy_plot <- ggplot(data.frame(
  "Category" = factor(names(col_transfers), levels = names(col_transfers)),
  "Value" = 1:length(col_transfers)
  ), aes(x = Value, fill = Category)) +
  geom_bar() +
  scale_fill_manual(values = col_transfers, name = "Transfers") +
  theme_void() +
  theme(legend.position = "right")

extract_legend <- function(plot) {
  g <- ggplotGrob(plot)
  legend <- g$grobs[which(sapply(g$grobs, function(x) x$name) == "guide-box")][[1]]
  return(legend)
}

# Extract the legend
legend_grob <- extract_legend(dummy_plot)
  
# combine
grid.arrange(p_transfers, legend_grob, ncol = 2, widths = c(3, 5.5))
```