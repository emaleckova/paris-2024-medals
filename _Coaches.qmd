```{r}
# should filter out teams

coaches <- athletes_dat |> 
  filter(events != "['Men']", events != "['Women']") |> 
  group_by(coach) |> 
  summarise(n_athletes = length(unique(name))) |> 
  arrange(desc(n_athletes))
```

```{r}
top_coaches <- coaches |> 
  filter(nchar(coach) > 1) |> 
  top_n(n_athletes, n = 10)
```

```{r}
# identify athletes of each of the coaches

top_coaches_athletes <- athletes_dat |> 
  filter(coach %in% top_coaches$coach) |> 
  select(name, coach, disciplines) |> 
  # order by number of athletes per coach
  group_by(coach) |> 
  mutate(n_athletes = n()) |> 
  arrange(desc(n_athletes)) |> 
  select(-n_athletes)

#top_coaches_names <- unique(top_coaches$coach)

# polish disicpline spelling
top_coaches_athletes$disciplines <- str_sub(top_coaches_athletes$disciplines, 3, nchar(top_coaches_athletes$disciplines) - 2)
  
# polish coach's name before adding it
# (remove everything what is not a name or country code, line breaks for two coaches)
top_coaches_athletes$coach <- gsub("National: ", "", top_coaches_athletes$coach)
top_coaches_athletes$coach <- gsub("Club: ", "", top_coaches_athletes$coach)
top_coaches_athletes$coach <- gsub("([^,]*,[^,]*),", "\\1\n", top_coaches_athletes$coach)
```

```{r}
library(network)
library(igraph)


coaches_graph = graph_from_edgelist(top_coaches_athletes)
arcplot(top_coaches_athletes)



data(flo)
netflo = network(flo)
netflo

flo_edges = as.matrix(netflo, matrix.type = "edgelist")
arcplot(flo_edges, las = 1)

flo_names = get.vertex.attribute(netflo, "vertex.names")
arcplot(flo_edges, las = 1, labels = flo_names)

# numeric indices in 'flo_edges'
temp = unique(as.vector(t(flo_edges)))
temp

flo_labels = attributes(flo_edges)$vnames[temp]
arcplot(flo_edges, las = 1, labels = flo_labels)
```


```{r}
# credits: https://www.data-to-viz.com/graph/arc.html

coaches_graph <- graph_from_data_frame(top_coaches_athletes, directed = T)

### all details required for plotting must be stored as graph's attributes
# 2. disciplines for coaches
# a lookup table: each coach gets a discipline based on their first athlete
coach_disciplines <- top_coaches_athletes |> 
  group_by(coach) |> 
  summarize(discipline = first(disciplines))

# Ensure all unique nodes (both coaches and athletes) are present
nodes <- unique(c(top_coaches_athletes$coach, top_coaches_athletes$name))

# Create a named vector mapping each coach and athlete to their discipline
discipline_map <- setNames(top_coaches_athletes$disciplines, top_coaches_athletes$name)

# Add disciplines for coaches
discipline_map[coach_disciplines$coach] <- coach_disciplines$discipline

# Assign discipline to nodes in the graph
V(coaches_graph)$discipline <- discipline_map[V(coaches_graph)$name]

# 3. coach names
# unique coach-athlete names
coach_map <- setNames(top_coaches_athletes$coach, top_coaches_athletes$name)
# coach names to nodes in the graph (match by athlete's name)
V(coaches_graph)$coach <- coach_map[V(coaches_graph)$name]

### Node order
# aim: coach + all his/her athletes should come together
# unique coach names
coaches <- unique(top_coaches_athletes$coach)

# Create a custom node order: Coach followed by their athletes
ordered_nodes <- unlist(lapply(coaches, function(c) {
  c(c, top_coaches_athletes$name[top_coaches_athletes$coach == c])
}))

# Reorder nodes in the graph based on this order
V(coaches_graph)$order <- match(V(coaches_graph)$name, ordered_nodes)

### colour scale by discipline
col_disciplines <- col_paris[c(5, 2, 1, 3)]
names(col_disciplines) <- sort(unique(discipline_map))

ggraph(coaches_graph, layout = data.frame(x = V(coaches_graph)$order, y = 0)) +
  geom_edge_arc(edge_colour = col_paris[4], edge_alpha = 0.8, edge_width = 0.3, fold = T) +
  geom_node_point(aes(color = discipline, fill = discipline, size = name %in% top_coaches_athletes$coach), alpha = 0.75) +
  scale_colour_manual(values = col_disciplines, guide = "none") +
  scale_fill_manual(values = col_disciplines, guide = "none") +
  scale_size_manual(values = c(1.25, 3), guide = "none") +  # athletes = 1.25, coaches = 3; no legend for this
  geom_node_text(aes(label = ifelse(name %in% top_coaches_athletes$coach, name, NA)), 
                 size = 2.5, angle = 90, vjust = 0, hjust = 1, nudge_y = -1) +
  guides(colour = guide_legend(override.aes = list(size = 3), title = "Discipline")) +
  theme_void() +
  theme(
    legend.position = "top",
    plot.margin = unit(c(0,0,0.4,0), "null"),
    panel.spacing = unit(c(0,0,3.4,0), "null")
  ) +
  expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2))
```

