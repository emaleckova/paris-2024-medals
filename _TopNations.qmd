## COL: Medals by nation {width="50%"}

```{r}
#| label: helper-countries-with-flags

# I want to avoid NAs for countries which do not have a flag (provided by `fmt_flag()`)
# Therefore, a vector of 2-letter country codes included in `fmt_flag()` is needed

# store the gt temporarily
tmp <- info_flags()
# extract country codes
ccodes <- tmp[["_data"]][["country_code_2"]]
# delete the gt
remove(tmp)
```

<!-- Total counts? I.e, team of four contributer four medals even if it was a single medal ceremony.  -->


```{r}
#| label: table-nations-ranking

# Try two column combinations to merge per-country medal counts with two-letter country codes
# This increases the number of countries covered
tab_nations <- nations_dat |> 
  left_join(select(world, iso_a2, iso_a3, name_long), by = c("country_code" = "iso_a3"))

tab_nations <- tab_nations |> 
  left_join(select(world, iso_a2, name_long), by = c("country_long" = "name_long"), suffix = c("", "_alt"))

# Use coalesce to fill in missing values from the second join
tab_nations <- tab_nations |> 
  mutate(
    iso_a2 = coalesce(iso_a2, iso_a2_alt)
  ) |> 
  select(-iso_a2_alt, -geometry_alt)

tab_nations <- tab_nations |> 
  # a handful however still require a manual fix
  mutate(iso_a2 = case_when(
    country_code == "IRI" ~ "IR",
    country_code == "TPE" ~ "TW", # this is Taiwan - are they indeed synonyms?
    country_code == "HKG" ~ "HK",
    country_code == "DMA" ~ "DO", # Dominica = DOminican Republic?
    country == "France" ~ "FR",
    country == "Norway" ~ "NO",
    country == "Kosovo" ~ NA, # (KV returns "invalid")
    TRUE ~ iso_a2
  ))

tab_nations |> 
# ranking is only present as a column index (row name)
  mutate(ranking = as.numeric(rownames(nations_dat)),
        flag = ifelse(iso_a2 %in% ccodes, iso_a2, NA)) |> 
  select(ranking, flag, iso_a2, country_code, country_long, contains("Medal"), Total) |> 
  gt() |> 
  # add country flags
  fmt_flag(columns = iso_a2) |> 
  # this way, `NA` is not shown if country's flag is missing
  text_transform(
    locations = cells_body(columns = iso_a2),
    fn = function(x) {
      ifelse(is.na(x), "", x)
    }
  ) |> 
  cols_hide(columns = "flag") |> 
  # "string" column names
  cols_label(
    ranking = "Rank", 
    iso_a2 = "", 
    country_code = "", 
    country_long = "Country",
    `Gold.Medal` = html(as.character(icon_style(fontawesome("medal"), scale = 1.75, fill = col_medals["Gold"]))),
    `Silver.Medal` = html(as.character(icon_style(fontawesome("medal"), scale = 1.75, fill = col_medals["Silver"]))),
    `Bronze.Medal` = html(as.character(icon_style(fontawesome("medal"), scale = 1.75, fill = col_medals["Bronze"])))
  ) |> 
  # general table formating
  gt::tab_options(column_labels.font.weight = "bold",
                  column_labels.padding.horizontal = px(10),
                  table.background.color = "transparent",
                  table.font.color = "grey50") |> 
  cols_align(align = "center", columns = !contains("Country")) |> 
  # realtive column widths
  cols_width(
    ranking ~ px(90),
    iso_a2 ~ px(45),
    country_code ~ px(75),
    country_long ~ px(300),
    contains("Medal") ~ px(75),
    Total ~ px(75)
  ) |>
  # add interactivity
  opt_interactive(
    use_pagination = T, use_page_size_select = T, page_size_default = 10,
    use_sorting = T,
    use_search = T,
  )
```

## COL: Daily medals

### {.tabset}

#### Top 10 nations
```{r}
#| label: figure-cumsum-medals-top

# which are top ten nations?
top_nations <- nations_dat[1:10, ]$country

# colour scale for countries
col_countries <- c(
  "#FFCD00", "red", "#0055A4", "#000000",
  "#CF142B", "#008C45", "grey70", "#0047A0",
  "#FF9B00", "#0A3161"
)
names(col_countries) <- sort(top_nations)

# start & end dates
first_day <- as.Date(min(medalists_dat$medal_date))
last_day <- as.Date(max(medalists_dat$medal_date))

# cumulative sums per nation
daily_medals_totals <- medalists_dat |> 
  filter(country %in% top_nations) |> 
  # input are data for individual atheletes & team medals must thus be kept only once
  select(country, medal_date, event) |> 
  distinct() |> 
  group_by(country, medal_date) |> 
  summarise(daily_medals = n(), .groups = "drop") |> 
  mutate(medal_date = as.Date(medal_date)) |> 
  # fill any missing data -> line for all countries, even for initial zero counts
  complete(medal_date = seq(first_day, last_day, by = "1 day"),
           country = unique(country),
           fill = list(daily_medals = 0)) |> 
  arrange(medal_date) |> 
  group_by(country) |> 
  mutate(cumsum_medals = cumsum(daily_medals)) |> 
  ungroup()

# the last row for each state is the total -> annotation placement
medal_sums <- daily_medals_totals |> 
  group_by(country) |> 
  slice_tail()

# plot; credits: https://github.com/z3tt/TidyTuesday/blob/main/R/2020_52_BigMacIndex.Rmd
p_cum_medals <- ggplot(daily_medals_totals, aes(x = medal_date, y = cumsum_medals, group = country, colour = country)) +
  geom_line(linewidth = 1) +
  geom_text_repel(
    data = medal_sums,
    aes(color = country, label = country),
    size = 3.5,
    direction = "y",
    xlim = c(last_day, NA),
    hjust = 0,
    segment.size = 0.75,
    segment.linetype = "dotted",
    box.padding = .4,
    segment.curvature = -0.1,
    segment.ncp = 3,
    segment.angle = 20
  ) +
  scale_x_date(breaks = seq(first_day, last_day, 1), date_labels = "%m-%d",
               expand = c(0, 0), limits = as.Date(c(first_day, "2024-08-14"))) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 105)) +
  scale_colour_manual(values = col_countries) +
  labs(
    x = "",
    y = "cumulative count"
  ) +
  theme_classic() +
  theme(
    panel.background = element_blank(),
    panel.grid = element_blank(),
    axis.line.x = element_line(color = "grey50"),
    axis.line.y = element_line(color = "grey50"),
    axis.text.x = element_text(size = 14, angle = 90, vjust = 0.5),
    axis.text.y = element_text(size = 14),
    legend.position = "none",
    aspect.ratio = 0.55
  )

# animate it!
anim_cum_medals <- p_cum_medals +
  transition_reveal(along = medal_date)

animate(anim_cum_medals, nframes = 25, duration = 25, end_pause = 10)
```


#### Czech Republic

```{r}
#| label: figure-cumsum-medals-cze

# get cumulative sums
daily_medals_cze <- medalists_dat |> 
  filter(country == "Czechia") |> 
  select(country, medal_date, event) |> 
  # team medals should be kept only once
  distinct() |> 
  group_by(country, medal_date) |> 
  summarise(daily_medals = n(), .groups = "drop") |> 
  mutate(medal_date = as.Date(medal_date)) |> 
  complete(medal_date = seq(first_day, last_day, by = "1 day"),
           country = "Czechia",
           fill = list(daily_medals = 0)) |>
  arrange(medal_date) |> 
  mutate(cumsum_medals = cumsum(daily_medals))

# collect medal events
events_cze <- medalists_dat |> 
  filter(country == "Czechia") |> 
  select(medal_date, discipline, event) |> 
  # team medals should be kept only once
  distinct()

# plot; credits: https://github.com/z3tt/TidyTuesday/blob/main/R/2020_52_BigMacIndex.Rmd
p_cum_medals_cze <- ggplot(daily_medals_cze, aes(x = medal_date, y = cumsum_medals, group = country)) +
  geom_line(linewidth = 1, colour = col_paris[3]) +
  scale_x_date(breaks = seq(first_day, last_day, 1), date_labels = "%m-%d",
               expand = c(0, 0), limits = as.Date(c(first_day, "2024-08-14"))) +
  scale_y_continuous(expand = c(0, 0), limits = c(0, 6), breaks = seq(2, 6, 2)) +
  scale_colour_manual(values = col_countries) +
  labs(
    x = "",
    y = "cumulative count"
  ) +
  theme_classic() +
  theme(
    panel.background = element_blank(),
    panel.grid = element_blank(),
    axis.line.x = element_line(color = "grey50"),
    axis.line.y = element_line(color = "grey50"),
    axis.text.x = element_text(size = 14, angle = 90, vjust = 0.5),
    axis.text.y = element_text(size = 14),
    legend.position = "none",
    aspect.ratio = 0.55
  )

# animate it!
anim_cum_medals_cze <- p_cum_medals_cze +
  transition_reveal(along = medal_date)

animate(anim_cum_medals_cze, nframes = 25, duration = 25, end_pause = 10)
```
