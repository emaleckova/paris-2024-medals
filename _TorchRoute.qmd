## ROW: Intro

The Olympic Torch Relay started traditionally in Olympia, Greece (on April 16) and from there, traveled by sea to Marseille, France, arriving on May 8. Upon the torch' arrival to France, followed a 68-day journey across 65 French territories. During this period, the flame visited six overseas territories (Guadeloupe, French Guiana, Martinique, French Polynesia, New Caledonia, and RÃ©union) and passed through over 400 towns. Approximately 10,000 torchbearers participated, covering an average of 200 meters each. The relay concluded with the lighting of the Olympic cauldron at the Opening Ceremony on July 26, 2024.

## ROW: Plots
```{r}
#| label: get-world

# Here, I am loading the world data again because I need a coordinate system compatible with the torch data
world <- ne_countries(scale = 110, type = "countries", returnclass = "sf") |> 
  # Convert WGS84 to projected crs (here Robinson)
  st_transform(world_ne, crs = "EPSG:4326")
```

### COL: Global map

```{r}
#| label: figure-torch-route-world

# credits: https://r-graph-gallery.com/how-to-draw-connecting-routes-on-map-with-r-and-great-circles.html

# A function to plot connections
plot_my_connection=function( dep_lon, dep_lat, arr_lon, arr_lat, ...){
    inter <- gcIntermediate(c(dep_lon, dep_lat), c(arr_lon, arr_lat), n=50, addStartEnd=TRUE, breakAtDateLine=F)             
    inter=data.frame(inter)
    diff_of_lon=abs(dep_lon) + abs(arr_lon)
    if(diff_of_lon > 180){
        lines(subset(inter, lon>=0), lty = 3)
        lines(subset(inter, lon<0), lty = 3)
    }else{
        lines(inter, lty = 3)
        }
    }

# generate city pairs - i.e, by stage
city_pairs <- torch_coord  |> 
  # ensure stage order
  arrange(stage_number)  |> 
  # coordinates of the next stage
  mutate(
    next_long = lead(long),
    next_lat = lead(lat)
  ) |> 
  filter(!is.na(next_long))  # removes last row (no next stage)

# keep only longer distance
distance_pairs <- city_pairs |> 
  filter(stage_number == "1" | stage_number == "2" | stage_number %in% as.factor(c(29:36)))

map("world", col = adjustcolor(col_paris[2], alpha.f = 0.75), fill = TRUE, bg = "white",
    lwd = 0.05, mar = rep(0,4), border = 0, ylim = c(-60,80))
for(i in 1:nrow(distance_pairs)){
  plot_my_connection(distance_pairs$long[i], distance_pairs$lat[i], distance_pairs$next_long[i], distance_pairs$next_lat[i])
}
# overseas points
points(x = torch_coord[torch_coord$state != "France", ]$long, y = torch_coord[torch_coord$state != "France", ]$lat, col = col_paris[4], cex = 1, pch = 20)
# continental france
points(x = torch_coord[torch_coord$state == "France", ]$long, y = torch_coord[torch_coord$state == "France", ]$lat, col = col_paris[4], cex = 0.25, pch = 20)
# label Olympia and overseas
text(torch_coord[torch_coord$city == "Olympia" | torch_coord$state != "France" & torch_coord$city != "Athens" & torch_coord$state != "Martinique", ]$city,
     x = torch_coord[torch_coord$city == "Olympia" | torch_coord$state != "France" & torch_coord$city != "Athens" & torch_coord$state != "Martinique", ]$long,
     y = torch_coord[torch_coord$city == "Olympia" | torch_coord$state != "France" & torch_coord$city != "Athens" & torch_coord$state != "Martinique", ]$lat,  
     col = col_paris[4], cex = 1, pos = 2)
text(torch_coord[torch_coord$state == "Guadeloupe", ]$city, x = torch_coord[torch_coord$state == "Guadeloupe", ]$long, y = torch_coord[torch_coord$state == "Guadeloupe", ]$lat, col = col_paris[4], cex = 1, pos = 4)
```

### COL: France

```{r}
#| label: figure-torch-route-france

# Route in France
french_pairs <- city_pairs |> 
  filter(state == "France", )

# I will label a few. I am subsetting by stage to remove duplicates
stage_selection <- as.factor(c(3, 7, 8, 10, 16, 24, 36, 37, 39, 43, 48, 55, 70))

map("world", col = adjustcolor(col_paris[2], alpha.f = 0.75), fill = TRUE, bg = "white", lwd = 0.05, mar = rep(0,4), border = "white",
    xlim = c(-8, 10.5), ylim = c(42, 51.5))
# France on top if it
map("world", regions = "France", col = col_paris[2], fill = TRUE, add = TRUE, border = "white")
# Highlight Paris
map("france", regions = "Paris", col = col_paris[5], fill = TRUE, border = "white", add = TRUE)
for(i in 1:nrow(french_pairs)){
  plot_my_connection(french_pairs$long[i], french_pairs$lat[i], french_pairs$next_long[i], french_pairs$next_lat[i])
}
points(x = torch_coord$long, y = torch_coord$lat, col = col_paris[4], cex = 1, pch = 20)
# label some cities
text(torch_coord[torch_coord$stage_number %in% stage_selection, ]$city, x = torch_coord[torch_coord$stage_number %in% stage_selection, ]$long, y = torch_coord[torch_coord$stage_number %in% stage_selection, ]$lat, col = col_paris[4], cex = 1, pos = 2)
```

