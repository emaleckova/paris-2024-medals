## COL: Disciplines with mutli-medalists 

<!-- There are only 17 disciplines where one athlete won at least two medals. This section will focus on them. -->

```{r}
#| label: get-top-medalists

### Medals per athelete: totals and by type
medalists_summarized <- medalists_dat |> 
  # keep only medal events
  filter(is_medallist == "True") |> 
  # medals by athlete
  group_by(name, country, country_code, gender, discipline, medal_type) |> 
  summarise(N_of_type = n()) |> 
  group_by(name, country, discipline) |> 
  mutate(N_total = sum(N_of_type)) |> 
  ungroup() |> 
  pivot_wider(id_cols = c(1:5, "N_total"), names_from = "medal_type", values_from = "N_of_type")
```

```{r}
top_disciplines <- sort(unique(medalists_summarized[medalists_summarized$N_total > 1, ]$discipline), decreasing = T)

# Selection of athletes is done by total, which is then broken by medal type

# Start of sorted data frame
medalists_top <- medalists_summarized |> 
  filter(N_total > 1) |> 
  group_by(discipline) |> 
  slice_max(N_total, n = 3, with_ties = T) |> 
  # create a label for plots
  mutate(name_label = paste(name, "\n", N_total, "medals")) |> 
  # athelte helper IDs - sorted by total number of medals
  group_by(discipline, name) |> 
  arrange(desc(N_total)) |> 
  # discipline_IDs
  group_by(discipline) |> 
  mutate(discipline_id = cur_group_id() * -1) |> 
  # athlete IDs
  group_by(discipline_id) |> 
  mutate(athlete_ID = 1:n())

# replace NAs with zero for smooth plotting
medalists_top[is.na(medalists_top)] <- 0

# extract discipline names -> axis labels
disciplines <- unique(medalists_top$discipline)

# Prepare for plotting
plot_medalists <- medalists_top |> 
  pivot_longer(cols = c("Gold", "Silver", "Bronze"), values_to = "Count", names_to = "Medal_type") |> 
  # arrange by total number of medals
  arrange(desc(N_total)) |> 
  # as factor is for `facet_wrap` (https://stackoverflow.com/questions/15116081/controlling-order-of-facet-grid-facet-wrap-in-ggplot2)
  mutate(across(name_label, ~factor(., levels = unique(name_label))))
  
# recover details about individual medals
plot_medalists <- medalists_dat |> 
    left_join(select(plot_medalists, name, country_code, name_label), by = c("name", "country_code")) |> 
    mutate(medal_date = lubridate::ymd(medal_date),
           # this is to have dates on x-axis matching with "medal data points"
           #medal_date_label = factor(format(medal_date, "%b %d")),
           # use of flagcdn as source of flags requires ISO 3166 country codes
           code_iso2c = countrycode(country_long, origin = "country.name", destination = "iso2c"),
           flag_url = paste0("https://flagcdn.com/h20/", tolower(code_iso2c), ".png"),
           flag_label = paste0("<img src='", flag_url, "' width='16' height='12'>")
    ) 
```

```{r}
#| label: figure-medalist-scatterpie

ggplot() +
  geom_scatterpie(data = medalists_top, aes(x = athlete_ID * 3, y = discipline_id * 3, group = name, r = N_total / 4),
                  cols = c("Bronze", "Silver", "Gold")) + 
  scale_fill_manual(values = col_medals) +
  coord_equal() +
  scale_y_continuous(breaks = seq(-3, length(top_disciplines) * -3, -3),
                     labels = rev(top_disciplines)) +
  theme_void() +
  theme(axis.text.y = element_text(face = "bold", size = 8, hjust = 1),
        legend.position = "none")
```

## COL: Explore top medalists by sport (interactive)

```{r}
# Make R dataframe accessible to ojs
ojs_define(medalists_ojs = medalists_top)

# And prepared, sorted selection of disciplines
ojs_define(top_disciplines_ojs = rev(top_disciplines)) # rev() is for A to Z order in the upcoming dropdown menu
```

### ROW: Dropdown menu {height="15%"}

```{ojs}
// transpose because ojs wants it
medalists = transpose(medalists_ojs)

// create a dropdown menu
viewof disciplineDropdown = Inputs.select(
  top_disciplines_ojs,
  {label: "Select a discipline:", labelPosition: "top"}
)

// Filter dataset based on selected discipline
filteredData = medalists.filter(d => d.discipline === disciplineDropdown)

//filteredData
```

### ROW: Observable plots

```{ojs}
// plot for subset by discipline
Plot.plot({
  marks: [
    Plot.dot(filteredData, {
      x: "medal_date",
      y: 0.2,
      fy: "name_label",
      fill: "medal_type",
      r: 5
    })
  ],
  marginBottom: 60,
  marginLeft: 200,
  //aspectRatio: fixed ? 1 : undefined,
  
  symbol: {legend: false},
  
  color: {
    domain: ["Gold", "Silver", "Bronze"],
    range: ["#FCC65B", "#E5E5E5", "#E0BD95"]
  },
  
  x: {
    label: "",
    tickRotate: -90,
  },
  y: {
    label: "",
    axis: null
  }
})
```

