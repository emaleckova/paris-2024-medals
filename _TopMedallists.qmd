## ROW: Disciplines with mutli-medalists 

<!-- There are only 17 disciplines where one athlete won at least two medals. This section will focus on them. -->

### COL: Top per discipline (static)

```{r}
#| label: get-top-medalists

### Medals per athelete: totals and by type
medalists_summarized <- medalists_dat |> 
  # keep only medal events
  filter(is_medallist == "True") |> 
  # medals by athlete
  group_by(name, country, country_code, gender, discipline, medal_type) |> 
  summarise(N_of_type = n()) |> 
  group_by(name, country, discipline) |> 
  mutate(N_total = sum(N_of_type)) |> 
  ungroup() |> 
  pivot_wider(id_cols = c(1:5, "N_total"), names_from = "medal_type", values_from = "N_of_type")
```

```{r}
top_disciplines <- sort(unique(medalists_summarized[medalists_summarized$N_total > 1, ]$discipline), decreasing = T)

# Selection of athletes is done by total, which is then broken by medal type

# Start of sorted data frame
medalists_top <- medalists_summarized |> 
  filter(N_total > 1) |> 
  group_by(discipline) |> 
  slice_max(N_total, n = 3, with_ties = T) |> 
  # create a label for plots
  mutate(label = paste0(name, " (", country_code, ") \n ", N_total, " medals")) |> 
  # athelte helper IDs - sorted by total number of medals
  group_by(discipline, name) |> 
  arrange(desc(N_total)) |> 
  # discipline_IDs
  group_by(discipline) |> 
  mutate(discipline_id = cur_group_id() * -1) |> 
  # athlete IDs
  group_by(discipline_id) |> 
  mutate(athlete_ID = 1:n())

# replace NAs with zero for smooth plotting
medalists_top[is.na(medalists_top)] <- 0

# extract discipline names -> axis labels
disciplines <- unique(medalists_top$discipline)
```


```{r}
#| label: figure-medalist-scatterpie
#| out-width: "100%"

ggplot() +
  geom_scatterpie(data = medalists_top, aes(x = athlete_ID * 3, y = discipline_id * 2, group = name, r = N_total / 5),
                  cols = c("Bronze", "Silver", "Gold")) + 
  scale_fill_manual(values = col_medals) +
  coord_equal() +
  scale_y_continuous(breaks = seq(-2, length(top_disciplines) * -2, -2),
                     labels = rev(top_disciplines)) +
  theme_void() +
  theme(axis.text.y = element_text(face = "bold", hjust = 1),
        legend.position = "none")
```

```{r}
#| include: false
#| execute: false

ls_p_medalists <- list()

for (i in top_disciplines) {
  input <- medalists_top |> 
    filter(discipline == i)
  
  p <- ggplot(data = input, aes(x = N_of_type, fill = medal_type, width = N_total)) +
    geom_bar() +
    scale_fill_manual(values = col_medals) +
    facet_wrap(~label, scales = "free", ncol = 6) +
    coord_polar(theta = "x") +
    labs(title = i) +
    theme_void() +
    theme(plot.title = element_text(hjust = 0.5),
          aspect.ratio = 1,
          legend.position = "none")
  
ls_p_medalists[[i]] <- p
}

```


### COL: Explore top medalists by sport (interactive)

<!-- This is an intercative addition to the summary plot created above. User can select discipline and can then explore athletes. -->
```{r}
#| label: medalists-for-ojs

ojs_define(medalists_top_ojs = medalists_top)
```


```{ojs}
medalists = transpose(medalists_top_ojs)

viewof disciplineDropdown = Inputs.select(
  medalists_top_ojs.map(d => d.discipline),
  {
    label: "Choose a discipline",
    unique: true
}
)
```



<!-- backup code -->

```{r}
# Spots with at least two meadls per athlete
unique(medalists_top[medalists_top$N_total > 1, ]$discipline)

# such athletes
unique(medalists_top[medalists_top$N_total > 1, ]$name)
```

