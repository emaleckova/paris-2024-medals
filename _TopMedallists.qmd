---
resources:
  - data/medallists.csv
---

## ROW: Disciplines with mutli-medalists 

<!-- There are only 17 disciplines where one athlete won at least two medals. This section will focus on them. -->

### COL: Top per discipline (static)

```{r}
#| label: get-top-medalists

### Medals per athelete: totals and by type
medalists_summarized <- medalists_dat |> 
  # keep only medal events
  filter(is_medallist == "True") |> 
  # medals by athlete
  group_by(name, country, country_code, gender, discipline, medal_type) |> 
  summarise(N_of_type = n()) |> 
  group_by(name, country, discipline) |> 
  mutate(N_total = sum(N_of_type)) |> 
  ungroup() |> 
  pivot_wider(id_cols = c(1:5, "N_total"), names_from = "medal_type", values_from = "N_of_type")
```

```{r}
top_disciplines <- sort(unique(medalists_summarized[medalists_summarized$N_total > 1, ]$discipline), decreasing = T)

# Selection of athletes is done by total, which is then broken by medal type

# Start of sorted data frame
medalists_top <- medalists_summarized |> 
  filter(N_total > 1) |> 
  group_by(discipline) |> 
  slice_max(N_total, n = 3, with_ties = T) |> 
  # create a label for plots
  mutate(name_label = paste(name, "\n", N_total, "medals")) |> 
  # athelte helper IDs - sorted by total number of medals
  group_by(discipline, name) |> 
  arrange(desc(N_total)) |> 
  # discipline_IDs
  group_by(discipline) |> 
  mutate(discipline_id = cur_group_id() * -1) |> 
  # athlete IDs
  group_by(discipline_id) |> 
  mutate(athlete_ID = 1:n())

# replace NAs with zero for smooth plotting
medalists_top[is.na(medalists_top)] <- 0

# extract discipline names -> axis labels
disciplines <- unique(medalists_top$discipline)
```

<!-- plot by gender as well? -->

```{r}
#| label: figure-medalist-scatterpie

ggplot() +
  geom_scatterpie(data = medalists_top, aes(x = athlete_ID * 3, y = discipline_id * 3, group = name, r = N_total / 4),
                  cols = c("Bronze", "Silver", "Gold")) + 
  scale_fill_manual(values = col_medals) +
  coord_equal() +
  scale_y_continuous(breaks = seq(-3, length(top_disciplines) * -3, -3),
                     labels = rev(top_disciplines)) +
  theme_void() +
  theme(axis.text.y = element_text(face = "bold", hjust = 1),
        legend.position = "none")
```

```{r}
#| include: false
#| execute: false

ls_p_medalists <- list()

for (i in top_disciplines) {
  input <- medalists_top |> 
    filter(discipline == i) |> 
    pivot_longer(cols = c("Gold", "Silver", "Bronze"), values_to = "Count", names_to = "Medal_type") |> 
    # arrange by total number of medals
    arrange(desc(N_total)) |> 
    # as factor is for `facet_wrap` (https://stackoverflow.com/questions/15116081/controlling-order-of-facet-grid-facet-wrap-in-ggplot2)
    mutate(across(name_label, ~factor(., levels = unique(name_label))))
  
  # recover details about individual medals
  p <- medalists_dat |> 
    filter(discipline == i, name %in% input$name) |> 
    left_join(select(input, name, country_code, name_label), by = c("name", "country_code")) |> 
    mutate(medal_date = lubridate::ymd(medal_date),
           # this is to have dates on x-axis matching with "medal data points"
           #medal_date_label = factor(format(medal_date, "%b %d")),
           # use of flagcdn as source of flags requires ISO 3166 country codes
           code_iso2c = countrycode(country_long, origin = "country.name", destination = "iso2c"),
           flag_url = paste0("https://flagcdn.com/h20/", tolower(code_iso2c), ".png"),
           flag_label = paste0("<img src='", flag_url, "' width='16' height='12'>")
    ) |> 
    # sort alphabetically -> should reflect time flow
    ggplot(aes(x = medal_date, y = 0.1)) +
    geom_point(aes(colour = medal_type), fill = "black", size = 3) +
    scale_colour_manual(values = col_medals) +
    geom_text(aes(x = medal_date, y = 0.2, label = event), angle = 90, vjust = 0, size = 3) +
    facet_wrap(~ flag_label + name_label, scales = "free_y") +
    scale_y_continuous(limits = c(-0.1, 0.5)) +
    theme_void() +
    theme(
      axis.title = element_blank(),
      axis.line.x = element_line(colour = "black"),
      axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5),
      axis.ticks.x = element_line(colour = "black", linewidth = 1),
      aspect.ratio = 1,
      legend.position = "none",
      strip.text = ggtext::element_markdown()
    )
  
  ls_p_medalists[[i]] <- p
}
```

<!-- tabular version of the above-->

```{r}
#| include: false
#| execute: false

ls_tbl_medalists <- list()

for (i in top_disciplines) {
  input <- medalists_top |> 
    filter(discipline == i) |> 
    pivot_longer(cols = c("Gold", "Silver", "Bronze"), values_to = "Count", names_to = "Medal_type") |> 
    # arrange by total number of medals
    arrange(desc(N_total)) |> 
    mutate(across(name_label, ~factor(., levels = unique(name_label))))
  
  # p <- ggplot(data = input, aes(x = "", y = Count, fill = Medal_type)) +
  #   geom_bar(stat = "identity", width = 1) +
  #   scale_fill_manual(values = col_medals) +
  #   facet_wrap(~label, scales = "free", ncol = 6) +
  #   coord_polar(theta = "y", start = 0) +
  #   labs(title = i) +
  #   theme_void() +
  #   theme(plot.title = element_text(hjust = 0.5),
  #         aspect.ratio = 1,
  #         legend.position = "none")
  
  # recover details about individual medals
  tab <- medalists_dat |> 
    filter(discipline == i, name %in% input$name) |> 
    pivot_wider(id_cols = c("country_code", "name"), names_from = "event", values_from = "medal_type") |> 
    mutate(across(-contains(c("country_code", "name")), ~ case_when(
      . == "Gold" ~ html(as.character(icon_style(fontawesome("medal"), scale = 1.75, fill = col_medals["Gold"]))),
      . == "Silver" ~ html(as.character(icon_style(fontawesome("medal"), scale = 1.75, fill = col_medals["Silver"]))),
      . == "Bronze" ~ html(as.character(icon_style(fontawesome("medal"), scale = 1.75, fill = col_medals["Bronze"]))),
      TRUE ~ html(as.character(icon_style(fontawesome("medal"), scale = 1.75, fill = "white")))
    ))) |> 
    gt() |> 
    fmt_markdown(-contains(c("country_code", "name"))) |> 
    fmt_flag(columns = country_code) |> 
    cols_merge(columns = c(country_code, name)) |> 
    cols_align(align = "center", columns = !contains("name")) |> 
    cols_align(align = "left", columns = contains("country_code")) |> 
    cols_label(country_code = "Name")
  
  
  ls_tbl_medalists[[i]] <- tab
}
```



### COL: Explore top medalists by sport (interactive)

```{shinylive-r}
#| standalone: true

library(dplyr)
library(lubridate)
library(countrycode)
library(ggplot2)
library(ggtext)
library(gt)

# Unfortunately, {shinylive-r} chunks do not have access to data loaded and preprocessed within pure {r} chunks.
# Therefore load raw data from URL (!!!) and preprocess it for plotting again.

medalists_dat <- read.delim("https://www.kaggle.com/datasets/piterfm/paris-2024-olympic-summer-games/medallists.csv", sep = ",", header = T)

medalists_summarized <- medalists_dat |> 
  # keep only medal events
  filter(is_medallist == "True") |> 
  # medals by athlete
  group_by(name, country, country_code, gender, discipline, medal_type) |> 
  summarise(N_of_type = n()) |> 
  group_by(name, country, discipline) |> 
  mutate(N_total = sum(N_of_type)) |> 
  ungroup() |> 
  pivot_wider(id_cols = c(1:5, "N_total"), names_from = "medal_type", values_from = "N_of_type")

medalists_top <- medalists_summarized |> 
  filter(N_total > 1) |> 
  group_by(discipline) |> 
  slice_max(N_total, n = 3, with_ties = T) |> 
  # create a label for plots
  mutate(name_label = paste(name, "\n", N_total, "medals")) |> 
  # athelte helper IDs - sorted by total number of medals
  group_by(discipline, name) |> 
  arrange(desc(N_total)) |> 
  # discipline_IDs
  group_by(discipline) |> 
  mutate(discipline_id = cur_group_id() * -1) |> 
  # athlete IDs
  group_by(discipline_id) |> 
  mutate(athlete_ID = 1:n())

# replace NAs with zero for smooth plotting
medalists_top[is.na(medalists_top)] <- 0

# extract discipline names -> axis labels
disciplines <- unique(medalists_top$discipline)

# Define UI for the Shiny app
ui <- fluidPage(
  titlePanel("Top Medalists by Discipline"),
  sidebarLayout(
    sidebarPanel(
      selectInput("discipline", "Choose a discipline:", choices = disciplines)
    )
    mainPanel(
      textOutput("selected_discipline")
    )
  )
)

# Define server logic for the Shiny app
server <- function(input, output) {
  output$selected_discipline <- renderText({
    paste("You have selected:", input$discipline)
  })
}

# Run the Shiny app
shinyApp(ui = ui)
```


